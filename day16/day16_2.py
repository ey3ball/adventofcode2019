#!/usr/bin/env python3

import time

puzzle = "59796332430280528211060657577039744056609636505111313336094865900635343682296702094018432765613019371234483818415934914575717134617783515237300919201989706451524069044921384738930172026234872525254689609787752401342687098918804210494391161531008341329016626922990938854681575317559821067933058630688365067790812341475168200215494963690593873250884807840611487288560291748414160551508979374335267106414602526249401281066501677212002980616711058803845336067123298983258010079178111678678796586176705130938139337603538683803154824502761228184209473344607055926120829751532887810487164482307564712692208157118923502010028250886290873995577102178526942152"

#puzzle = "03036732577212944063491565474664"
#puzzle = "02935109699940807407585447034323"
#puzzle = "03081770884921959731165446850517"
#puzzle = "12345678"
#puzzle = "80871224585914546619083218645595"
#puzzle = "19617804207202209144916044189917"
#puzzle = "69317163492948606335995924319873"
signal = [int(i) for i in puzzle] * 10000

size = len(signal)
offset = sum([signal[i] * 10 ** (6-i) for i in range(0,7)])

assert offset >= size / 2
print(offset)

partial_signal = signal[-1:offset-1:-1]
for step in range(0, 100):
    acc = 0
    for i, val in enumerate(partial_signal):
        if acc == 0:
            print(val)
        acc += val
        partial_signal[i] = abs(acc) % 10

print(partial_signal[-1:-9:-1])
